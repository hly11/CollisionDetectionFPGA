// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module image_filter_Block_loopexit24_i_proc1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 10'b1;
parameter    ap_ST_st2_fsm_1 = 10'b10;
parameter    ap_ST_st3_fsm_2 = 10'b100;
parameter    ap_ST_st4_fsm_3 = 10'b1000;
parameter    ap_ST_st5_fsm_4 = 10'b10000;
parameter    ap_ST_st6_fsm_5 = 10'b100000;
parameter    ap_ST_st7_fsm_6 = 10'b1000000;
parameter    ap_ST_st8_fsm_7 = 10'b10000000;
parameter    ap_ST_st9_fsm_8 = 10'b100000000;
parameter    ap_ST_st10_fsm_9 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_E0 = 8'b11100000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] p_read;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm = 10'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_29;
reg    ap_sig_bdd_43;
wire   [0:0] tmp_4_fu_29_p2;
reg   [0:0] tmp_4_reg_82;
wire   [31:0] grp_fu_25_p1;
reg   [31:0] dp_2_reg_87;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_55;
wire   [63:0] grp_fu_25_p0;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_67;
wire   [31:0] res_V_2_fu_35_p1;
wire   [7:0] exp_V_fu_38_p4;
wire   [7:0] exp_V_4_fu_48_p2;
wire   [31:0] p_Result_s_fu_54_p5;
wire   [31:0] dp_fu_66_p1;
reg    grp_fu_25_ce;
reg   [9:0] ap_NS_fsm;


image_filter_sitofp_64ns_32_9 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
image_filter_sitofp_64ns_32_9_U58(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_25_p0 ),
    .ce( grp_fu_25_ce ),
    .dout( grp_fu_25_p1 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        dp_2_reg_87 <= grp_fu_25_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_43)) begin
        tmp_4_reg_82 <= tmp_4_fu_29_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st10_fsm_9)
begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st10_fsm_9)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_67)
begin
    if (ap_sig_bdd_67) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_29)
begin
    if (ap_sig_bdd_29) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_55)
begin
    if (ap_sig_bdd_55) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// grp_fu_25_ce assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_43 or ap_sig_cseq_ST_st10_fsm_9)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ap_sig_bdd_43))) begin
        grp_fu_25_ce = ap_const_logic_0;
    end else begin
        grp_fu_25_ce = ap_const_logic_1;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_43)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_43) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_return = ((tmp_4_reg_82[0:0]===1'b1)? ap_const_lv32_0: dp_fu_66_p1);

/// ap_sig_bdd_29 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_29 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_43 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_43 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_55 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_55 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_67 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_67 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end
assign dp_fu_66_p1 = p_Result_s_fu_54_p5;
assign exp_V_4_fu_48_p2 = ($signed(exp_V_fu_38_p4) + $signed(ap_const_lv8_E0));
assign exp_V_fu_38_p4 = {{res_V_2_fu_35_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
assign grp_fu_25_p0 = p_read;
assign p_Result_s_fu_54_p5 = {{res_V_2_fu_35_p1[32'd31 : 32'd31]}, {exp_V_4_fu_48_p2}, {res_V_2_fu_35_p1[32'd22 : 32'd0]}};
assign res_V_2_fu_35_p1 = dp_2_reg_87;
assign tmp_4_fu_29_p2 = (p_read == ap_const_lv64_0? 1'b1: 1'b0);


endmodule //image_filter_Block_loopexit24_i_proc1

