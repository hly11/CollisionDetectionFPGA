// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module image_filter_fh_Block_Mat_exit71218_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        filter_size,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv5_1B = 5'b11011;
parameter    ap_const_lv5_15 = 5'b10101;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv5_F = 5'b1111;
parameter    ap_const_lv5_9 = 5'b1001;
parameter    ap_const_lv6_27 = 6'b100111;
parameter    ap_const_lv6_33 = 6'b110011;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] filter_size;
output  [5:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
wire   [0:0] tmp_s_fu_35_p2;
reg   [0:0] tmp_s_reg_161;
reg    ap_sig_bdd_36;
wire   [0:0] tmp_1_fu_41_p2;
reg   [0:0] tmp_1_reg_168;
wire   [0:0] tmp_2_fu_47_p2;
reg   [0:0] tmp_2_reg_174;
wire   [0:0] tmp_3_fu_53_p2;
reg   [0:0] tmp_3_reg_180;
wire   [0:0] tmp_4_fu_59_p2;
reg   [0:0] tmp_4_reg_185;
wire   [0:0] sel_tmp2_fu_70_p2;
reg   [0:0] sel_tmp2_reg_190;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_54;
wire   [0:0] sel_tmp7_fu_85_p2;
reg   [0:0] sel_tmp7_reg_196;
wire   [0:0] sel_tmp14_fu_101_p2;
reg   [0:0] sel_tmp14_reg_201;
wire   [0:0] sel_tmp1_fu_65_p2;
wire   [0:0] sel_tmp6_demorgan_fu_75_p2;
wire   [0:0] sel_tmp6_fu_79_p2;
wire   [0:0] sel_tmp13_demorgan_fu_90_p2;
wire   [0:0] sel_tmp13_fu_95_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_107;
wire   [0:0] or_cond_fu_113_p2;
wire   [4:0] newSel_fu_106_p3;
wire   [4:0] newSel1_cast_cast_fu_117_p3;
wire   [4:0] newSel5_fu_135_p3;
wire   [0:0] or_cond2_fu_124_p2;
wire   [0:0] or_cond6_fu_147_p2;
wire   [5:0] newSel5_cast_fu_143_p1;
wire   [5:0] newSel3_fu_128_p3;
reg   [2:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        sel_tmp14_reg_201 <= sel_tmp14_fu_101_p2;
        sel_tmp2_reg_190 <= sel_tmp2_fu_70_p2;
        sel_tmp7_reg_196 <= sel_tmp7_fu_85_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_36)) begin
        tmp_1_reg_168 <= tmp_1_fu_41_p2;
        tmp_2_reg_174 <= tmp_2_fu_47_p2;
        tmp_3_reg_180 <= tmp_3_fu_53_p2;
        tmp_4_reg_185 <= tmp_4_fu_59_p2;
        tmp_s_reg_161 <= tmp_s_fu_35_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st3_fsm_2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_54)
begin
    if (ap_sig_bdd_54) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_107)
begin
    if (ap_sig_bdd_107) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_36)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_36) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_return = ((or_cond6_fu_147_p2[0:0]===1'b1)? newSel5_cast_fu_143_p1: newSel3_fu_128_p3);

/// ap_sig_bdd_107 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_107 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_36 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_36 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_54 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_54 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign newSel1_cast_cast_fu_117_p3 = ((sel_tmp2_reg_190[0:0]===1'b1)? ap_const_lv5_F: ap_const_lv5_9);
assign newSel3_fu_128_p3 = ((tmp_4_reg_185[0:0]===1'b1)? ap_const_lv6_27: ap_const_lv6_33);
assign newSel5_cast_fu_143_p1 = newSel5_fu_135_p3;
assign newSel5_fu_135_p3 = ((or_cond_fu_113_p2[0:0]===1'b1)? newSel_fu_106_p3: newSel1_cast_cast_fu_117_p3);
assign newSel_fu_106_p3 = ((sel_tmp14_reg_201[0:0]===1'b1)? ap_const_lv5_1B: ap_const_lv5_15);
assign or_cond2_fu_124_p2 = (sel_tmp2_reg_190 | tmp_s_reg_161);
assign or_cond6_fu_147_p2 = (or_cond_fu_113_p2 | or_cond2_fu_124_p2);
assign or_cond_fu_113_p2 = (sel_tmp14_reg_201 | sel_tmp7_reg_196);
assign sel_tmp13_demorgan_fu_90_p2 = (sel_tmp6_demorgan_fu_75_p2 | tmp_2_reg_174);
assign sel_tmp13_fu_95_p2 = (sel_tmp13_demorgan_fu_90_p2 ^ ap_const_lv1_1);
assign sel_tmp14_fu_101_p2 = (tmp_3_reg_180 & sel_tmp13_fu_95_p2);
assign sel_tmp1_fu_65_p2 = (tmp_s_reg_161 ^ ap_const_lv1_1);
assign sel_tmp2_fu_70_p2 = (tmp_1_reg_168 & sel_tmp1_fu_65_p2);
assign sel_tmp6_demorgan_fu_75_p2 = (tmp_s_reg_161 | tmp_1_reg_168);
assign sel_tmp6_fu_79_p2 = (sel_tmp6_demorgan_fu_75_p2 ^ ap_const_lv1_1);
assign sel_tmp7_fu_85_p2 = (tmp_2_reg_174 & sel_tmp6_fu_79_p2);
assign tmp_1_fu_41_p2 = (filter_size == ap_const_lv32_F? 1'b1: 1'b0);
assign tmp_2_fu_47_p2 = (filter_size == ap_const_lv32_15? 1'b1: 1'b0);
assign tmp_3_fu_53_p2 = (filter_size == ap_const_lv32_1B? 1'b1: 1'b0);
assign tmp_4_fu_59_p2 = (filter_size == ap_const_lv32_27? 1'b1: 1'b0);
assign tmp_s_fu_35_p2 = (filter_size == ap_const_lv32_9? 1'b1: 1'b0);


endmodule //image_filter_fh_Block_Mat_exit71218_proc

