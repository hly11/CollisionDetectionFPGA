-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter_fh is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_control_bus_AWVALID : IN STD_LOGIC;
    s_axi_control_bus_AWREADY : OUT STD_LOGIC;
    s_axi_control_bus_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_control_bus_WVALID : IN STD_LOGIC;
    s_axi_control_bus_WREADY : OUT STD_LOGIC;
    s_axi_control_bus_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_control_bus_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_control_bus_ARVALID : IN STD_LOGIC;
    s_axi_control_bus_ARREADY : OUT STD_LOGIC;
    s_axi_control_bus_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_control_bus_RVALID : OUT STD_LOGIC;
    s_axi_control_bus_RREADY : IN STD_LOGIC;
    s_axi_control_bus_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_control_bus_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_bus_BVALID : OUT STD_LOGIC;
    s_axi_control_bus_BREADY : IN STD_LOGIC;
    s_axi_control_bus_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    input_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TVALID : IN STD_LOGIC;
    input_stream_TREADY : OUT STD_LOGIC;
    output_stream_TVALID : OUT STD_LOGIC;
    output_stream_TREADY : IN STD_LOGIC );
end;


architecture behav of image_filter_fh is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "image_filter_fh,hls_ip_2015_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.500000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.687500,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=104,HLS_SYN_DSP=87,HLS_SYN_FF=58963,HLS_SYN_LUT=32331}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_true : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal image_filter_fh_control_bus_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_size : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_Block_Mat_exit712_proc_U0_ap_start : STD_LOGIC;
    signal image_filter_fh_Block_Mat_exit712_proc_U0_ap_done : STD_LOGIC;
    signal image_filter_fh_Block_Mat_exit712_proc_U0_ap_continue : STD_LOGIC;
    signal image_filter_fh_Block_Mat_exit712_proc_U0_ap_idle : STD_LOGIC;
    signal image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready : STD_LOGIC;
    signal image_filter_fh_Block_Mat_exit712_proc_U0_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_Block_Mat_exit712_proc_U0_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_Block_Mat_exit712_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_fh_Block_Mat_exit712_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_fh_Block_Mat_exit712_proc_U0_ap_return_2 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_fh_Block_Mat_exit712_proc_U0_ap_return_3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_0_rows_V_channel : STD_LOGIC;
    signal img_0_rows_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_img_0_rows_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_0_rows_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_0_cols_V_channel : STD_LOGIC;
    signal img_0_cols_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_img_0_cols_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_0_cols_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_2_rows_V_channel : STD_LOGIC;
    signal img_2_rows_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_img_2_rows_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_2_rows_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_2_cols_V_channel : STD_LOGIC;
    signal img_2_cols_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_img_2_cols_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_2_cols_V_channel_full_n : STD_LOGIC;
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_start : STD_LOGIC;
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_done : STD_LOGIC;
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_continue : STD_LOGIC;
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_idle : STD_LOGIC;
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready : STD_LOGIC;
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TVALID : STD_LOGIC;
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TREADY : STD_LOGIC;
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_data_stream_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_data_stream_V_full_n : STD_LOGIC;
    signal image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_data_stream_V_write : STD_LOGIC;
    signal image_filter_fh_PadImage_480_640_51_U0_ap_start : STD_LOGIC := '0';
    signal image_filter_fh_PadImage_480_640_51_U0_ap_done : STD_LOGIC;
    signal image_filter_fh_PadImage_480_640_51_U0_ap_continue : STD_LOGIC;
    signal image_filter_fh_PadImage_480_640_51_U0_ap_idle : STD_LOGIC;
    signal image_filter_fh_PadImage_480_640_51_U0_ap_ready : STD_LOGIC;
    signal image_filter_fh_PadImage_480_640_51_U0_in_data_stream_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_PadImage_480_640_51_U0_in_data_stream_V_empty_n : STD_LOGIC;
    signal image_filter_fh_PadImage_480_640_51_U0_in_data_stream_V_read : STD_LOGIC;
    signal image_filter_fh_PadImage_480_640_51_U0_out_data_stream_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_PadImage_480_640_51_U0_out_data_stream_V_full_n : STD_LOGIC;
    signal image_filter_fh_PadImage_480_640_51_U0_out_data_stream_V_write : STD_LOGIC;
    signal image_filter_fh_Block_Mat_exit71218_proc_U0_ap_start : STD_LOGIC;
    signal image_filter_fh_Block_Mat_exit71218_proc_U0_ap_done : STD_LOGIC;
    signal image_filter_fh_Block_Mat_exit71218_proc_U0_ap_continue : STD_LOGIC;
    signal image_filter_fh_Block_Mat_exit71218_proc_U0_ap_idle : STD_LOGIC;
    signal image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready : STD_LOGIC;
    signal image_filter_fh_Block_Mat_exit71218_proc_U0_filter_size : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_Block_Mat_exit71218_proc_U0_ap_return : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_chn_write_image_filter_fh_Block_Mat_exit71218_proc_U0_FILTER_SIZE_4_loc_channel : STD_LOGIC;
    signal FILTER_SIZE_4_loc_channel_full_n : STD_LOGIC;
    signal image_filter_fh_FilterTest_480_640_1_U0_ap_start : STD_LOGIC;
    signal image_filter_fh_FilterTest_480_640_1_U0_ap_done : STD_LOGIC;
    signal image_filter_fh_FilterTest_480_640_1_U0_ap_continue : STD_LOGIC;
    signal image_filter_fh_FilterTest_480_640_1_U0_ap_idle : STD_LOGIC;
    signal image_filter_fh_FilterTest_480_640_1_U0_ap_ready : STD_LOGIC;
    signal image_filter_fh_FilterTest_480_640_1_U0_in_data_stream_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_FilterTest_480_640_1_U0_in_data_stream_V_empty_n : STD_LOGIC;
    signal image_filter_fh_FilterTest_480_640_1_U0_in_data_stream_V_read : STD_LOGIC;
    signal image_filter_fh_FilterTest_480_640_1_U0_out_data_stream_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_FilterTest_480_640_1_U0_out_data_stream_V_full_n : STD_LOGIC;
    signal image_filter_fh_FilterTest_480_640_1_U0_out_data_stream_V_write : STD_LOGIC;
    signal image_filter_fh_FilterTest_480_640_1_U0_p_read : STD_LOGIC_VECTOR (5 downto 0);
    signal image_filter_fh_Loop_1_proc_U0_ap_start : STD_LOGIC := '0';
    signal image_filter_fh_Loop_1_proc_U0_ap_done : STD_LOGIC;
    signal image_filter_fh_Loop_1_proc_U0_ap_continue : STD_LOGIC;
    signal image_filter_fh_Loop_1_proc_U0_ap_idle : STD_LOGIC;
    signal image_filter_fh_Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal image_filter_fh_Loop_1_proc_U0_img_12_data_stream_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_Loop_1_proc_U0_img_12_data_stream_0_V_empty_n : STD_LOGIC;
    signal image_filter_fh_Loop_1_proc_U0_img_12_data_stream_0_V_read : STD_LOGIC;
    signal image_filter_fh_Loop_1_proc_U0_img_2_data_stream_0_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_Loop_1_proc_U0_img_2_data_stream_0_V_full_n : STD_LOGIC;
    signal image_filter_fh_Loop_1_proc_U0_img_2_data_stream_0_V_write : STD_LOGIC;
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_start : STD_LOGIC;
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_done : STD_LOGIC;
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_continue : STD_LOGIC;
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_idle : STD_LOGIC;
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_ready : STD_LOGIC;
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_data_stream_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_data_stream_V_empty_n : STD_LOGIC;
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_data_stream_V_read : STD_LOGIC;
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TVALID : STD_LOGIC;
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TREADY : STD_LOGIC;
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal img_0_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel_write : STD_LOGIC;
    signal img_0_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel_empty_n : STD_LOGIC;
    signal img_0_rows_V_channel_read : STD_LOGIC;
    signal img_0_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel_write : STD_LOGIC;
    signal img_0_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel_empty_n : STD_LOGIC;
    signal img_0_cols_V_channel_read : STD_LOGIC;
    signal img_2_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_2_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_2_rows_V_channel_write : STD_LOGIC;
    signal img_2_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_2_rows_V_channel_empty_n : STD_LOGIC;
    signal img_2_rows_V_channel_read : STD_LOGIC;
    signal img_2_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_2_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_2_cols_V_channel_write : STD_LOGIC;
    signal img_2_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_2_cols_V_channel_empty_n : STD_LOGIC;
    signal img_2_cols_V_channel_read : STD_LOGIC;
    signal img_0_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_data_stream_0_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_data_stream_0_V_full_n : STD_LOGIC;
    signal img_0_data_stream_0_V_write : STD_LOGIC;
    signal img_0_data_stream_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_V_read : STD_LOGIC;
    signal img_1_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_1_data_stream_0_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal img_1_data_stream_0_V_full_n : STD_LOGIC;
    signal img_1_data_stream_0_V_write : STD_LOGIC;
    signal img_1_data_stream_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_1_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_V_read : STD_LOGIC;
    signal FILTER_SIZE_4_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal FILTER_SIZE_4_loc_channel_din : STD_LOGIC_VECTOR (5 downto 0);
    signal FILTER_SIZE_4_loc_channel_write : STD_LOGIC;
    signal FILTER_SIZE_4_loc_channel_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal FILTER_SIZE_4_loc_channel_empty_n : STD_LOGIC;
    signal FILTER_SIZE_4_loc_channel_read : STD_LOGIC;
    signal img_12_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_12_data_stream_0_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal img_12_data_stream_0_V_full_n : STD_LOGIC;
    signal img_12_data_stream_0_V_write : STD_LOGIC;
    signal img_12_data_stream_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_12_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_12_data_stream_0_V_read : STD_LOGIC;
    signal img_2_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_2_data_stream_0_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal img_2_data_stream_0_V_full_n : STD_LOGIC;
    signal img_2_data_stream_0_V_write : STD_LOGIC;
    signal img_2_data_stream_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_2_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_2_data_stream_0_V_read : STD_LOGIC;
    signal ap_reg_procdone_image_filter_fh_Block_Mat_exit712_proc_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_fh_PadImage_480_640_51_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_fh_Block_Mat_exit71218_proc_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_fh_FilterTest_480_640_1_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_fh_Loop_1_proc_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_fh_Mat2AXIvideo_32_480_640_5_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;
    signal ap_reg_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_image_filter_fh_Block_Mat_exit712_proc_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_start : STD_LOGIC;

    component image_filter_fh_Block_Mat_exit712_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component image_filter_fh_AXIvideo2Mat_32_480_640_5_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        input_stream_TVALID : IN STD_LOGIC;
        input_stream_TREADY : OUT STD_LOGIC;
        input_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        input_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        input_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        input_stream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        input_stream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_data_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_data_stream_V_full_n : IN STD_LOGIC;
        img_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_fh_PadImage_480_640_51_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_data_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_data_stream_V_empty_n : IN STD_LOGIC;
        in_data_stream_V_read : OUT STD_LOGIC;
        out_data_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_data_stream_V_full_n : IN STD_LOGIC;
        out_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_fh_Block_Mat_exit71218_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        filter_size : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component image_filter_fh_FilterTest_480_640_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_data_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_data_stream_V_empty_n : IN STD_LOGIC;
        in_data_stream_V_read : OUT STD_LOGIC;
        out_data_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_data_stream_V_full_n : IN STD_LOGIC;
        out_data_stream_V_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component image_filter_fh_Loop_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_12_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_12_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_12_data_stream_0_V_read : OUT STD_LOGIC;
        img_2_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_2_data_stream_0_V_full_n : IN STD_LOGIC;
        img_2_data_stream_0_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_fh_Mat2AXIvideo_32_480_640_5_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        output_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_stream_TVALID : OUT STD_LOGIC;
        output_stream_TREADY : IN STD_LOGIC;
        output_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_stream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_stream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FIFO_image_filter_fh_img_0_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_fh_img_0_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_fh_img_2_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_fh_img_2_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_fh_img_0_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_fh_img_1_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_fh_FILTER_SIZE_4_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (5 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_fh_img_12_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_fh_img_2_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_fh_control_bus_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        filter_size : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    image_filter_fh_control_bus_s_axi_U : component image_filter_fh_control_bus_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_bus_AWVALID,
        AWREADY => s_axi_control_bus_AWREADY,
        AWADDR => s_axi_control_bus_AWADDR,
        WVALID => s_axi_control_bus_WVALID,
        WREADY => s_axi_control_bus_WREADY,
        WDATA => s_axi_control_bus_WDATA,
        WSTRB => s_axi_control_bus_WSTRB,
        ARVALID => s_axi_control_bus_ARVALID,
        ARREADY => s_axi_control_bus_ARREADY,
        ARADDR => s_axi_control_bus_ARADDR,
        RVALID => s_axi_control_bus_RVALID,
        RREADY => s_axi_control_bus_RREADY,
        RDATA => s_axi_control_bus_RDATA,
        RRESP => s_axi_control_bus_RRESP,
        BVALID => s_axi_control_bus_BVALID,
        BREADY => s_axi_control_bus_BREADY,
        BRESP => s_axi_control_bus_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => image_filter_fh_control_bus_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        rows => rows,
        cols => cols,
        filter_size => filter_size);

    image_filter_fh_Block_Mat_exit712_proc_U0 : component image_filter_fh_Block_Mat_exit712_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_fh_Block_Mat_exit712_proc_U0_ap_start,
        ap_done => image_filter_fh_Block_Mat_exit712_proc_U0_ap_done,
        ap_continue => image_filter_fh_Block_Mat_exit712_proc_U0_ap_continue,
        ap_idle => image_filter_fh_Block_Mat_exit712_proc_U0_ap_idle,
        ap_ready => image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready,
        rows => image_filter_fh_Block_Mat_exit712_proc_U0_rows,
        cols => image_filter_fh_Block_Mat_exit712_proc_U0_cols,
        ap_return_0 => image_filter_fh_Block_Mat_exit712_proc_U0_ap_return_0,
        ap_return_1 => image_filter_fh_Block_Mat_exit712_proc_U0_ap_return_1,
        ap_return_2 => image_filter_fh_Block_Mat_exit712_proc_U0_ap_return_2,
        ap_return_3 => image_filter_fh_Block_Mat_exit712_proc_U0_ap_return_3);

    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0 : component image_filter_fh_AXIvideo2Mat_32_480_640_5_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_start,
        ap_done => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_done,
        ap_continue => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_continue,
        ap_idle => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_idle,
        ap_ready => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready,
        input_stream_TDATA => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TDATA,
        input_stream_TVALID => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TVALID,
        input_stream_TREADY => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TREADY,
        input_stream_TKEEP => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TKEEP,
        input_stream_TSTRB => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TSTRB,
        input_stream_TUSER => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TUSER,
        input_stream_TLAST => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TLAST,
        input_stream_TID => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TID,
        input_stream_TDEST => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TDEST,
        img_rows_V_read => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_rows_V_read,
        img_cols_V_read => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_cols_V_read,
        img_data_stream_V_din => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_data_stream_V_din,
        img_data_stream_V_full_n => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_data_stream_V_full_n,
        img_data_stream_V_write => image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_data_stream_V_write);

    image_filter_fh_PadImage_480_640_51_U0 : component image_filter_fh_PadImage_480_640_51_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_fh_PadImage_480_640_51_U0_ap_start,
        ap_done => image_filter_fh_PadImage_480_640_51_U0_ap_done,
        ap_continue => image_filter_fh_PadImage_480_640_51_U0_ap_continue,
        ap_idle => image_filter_fh_PadImage_480_640_51_U0_ap_idle,
        ap_ready => image_filter_fh_PadImage_480_640_51_U0_ap_ready,
        in_data_stream_V_dout => image_filter_fh_PadImage_480_640_51_U0_in_data_stream_V_dout,
        in_data_stream_V_empty_n => image_filter_fh_PadImage_480_640_51_U0_in_data_stream_V_empty_n,
        in_data_stream_V_read => image_filter_fh_PadImage_480_640_51_U0_in_data_stream_V_read,
        out_data_stream_V_din => image_filter_fh_PadImage_480_640_51_U0_out_data_stream_V_din,
        out_data_stream_V_full_n => image_filter_fh_PadImage_480_640_51_U0_out_data_stream_V_full_n,
        out_data_stream_V_write => image_filter_fh_PadImage_480_640_51_U0_out_data_stream_V_write);

    image_filter_fh_Block_Mat_exit71218_proc_U0 : component image_filter_fh_Block_Mat_exit71218_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_fh_Block_Mat_exit71218_proc_U0_ap_start,
        ap_done => image_filter_fh_Block_Mat_exit71218_proc_U0_ap_done,
        ap_continue => image_filter_fh_Block_Mat_exit71218_proc_U0_ap_continue,
        ap_idle => image_filter_fh_Block_Mat_exit71218_proc_U0_ap_idle,
        ap_ready => image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready,
        filter_size => image_filter_fh_Block_Mat_exit71218_proc_U0_filter_size,
        ap_return => image_filter_fh_Block_Mat_exit71218_proc_U0_ap_return);

    image_filter_fh_FilterTest_480_640_1_U0 : component image_filter_fh_FilterTest_480_640_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_fh_FilterTest_480_640_1_U0_ap_start,
        ap_done => image_filter_fh_FilterTest_480_640_1_U0_ap_done,
        ap_continue => image_filter_fh_FilterTest_480_640_1_U0_ap_continue,
        ap_idle => image_filter_fh_FilterTest_480_640_1_U0_ap_idle,
        ap_ready => image_filter_fh_FilterTest_480_640_1_U0_ap_ready,
        in_data_stream_V_dout => image_filter_fh_FilterTest_480_640_1_U0_in_data_stream_V_dout,
        in_data_stream_V_empty_n => image_filter_fh_FilterTest_480_640_1_U0_in_data_stream_V_empty_n,
        in_data_stream_V_read => image_filter_fh_FilterTest_480_640_1_U0_in_data_stream_V_read,
        out_data_stream_V_din => image_filter_fh_FilterTest_480_640_1_U0_out_data_stream_V_din,
        out_data_stream_V_full_n => image_filter_fh_FilterTest_480_640_1_U0_out_data_stream_V_full_n,
        out_data_stream_V_write => image_filter_fh_FilterTest_480_640_1_U0_out_data_stream_V_write,
        p_read => image_filter_fh_FilterTest_480_640_1_U0_p_read);

    image_filter_fh_Loop_1_proc_U0 : component image_filter_fh_Loop_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_fh_Loop_1_proc_U0_ap_start,
        ap_done => image_filter_fh_Loop_1_proc_U0_ap_done,
        ap_continue => image_filter_fh_Loop_1_proc_U0_ap_continue,
        ap_idle => image_filter_fh_Loop_1_proc_U0_ap_idle,
        ap_ready => image_filter_fh_Loop_1_proc_U0_ap_ready,
        img_12_data_stream_0_V_dout => image_filter_fh_Loop_1_proc_U0_img_12_data_stream_0_V_dout,
        img_12_data_stream_0_V_empty_n => image_filter_fh_Loop_1_proc_U0_img_12_data_stream_0_V_empty_n,
        img_12_data_stream_0_V_read => image_filter_fh_Loop_1_proc_U0_img_12_data_stream_0_V_read,
        img_2_data_stream_0_V_din => image_filter_fh_Loop_1_proc_U0_img_2_data_stream_0_V_din,
        img_2_data_stream_0_V_full_n => image_filter_fh_Loop_1_proc_U0_img_2_data_stream_0_V_full_n,
        img_2_data_stream_0_V_write => image_filter_fh_Loop_1_proc_U0_img_2_data_stream_0_V_write);

    image_filter_fh_Mat2AXIvideo_32_480_640_5_U0 : component image_filter_fh_Mat2AXIvideo_32_480_640_5_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_start,
        ap_done => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_done,
        ap_continue => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_continue,
        ap_idle => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_idle,
        ap_ready => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_ready,
        img_rows_V_read => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_rows_V_read,
        img_cols_V_read => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_cols_V_read,
        img_data_stream_V_dout => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_data_stream_V_dout,
        img_data_stream_V_empty_n => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_data_stream_V_empty_n,
        img_data_stream_V_read => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_data_stream_V_read,
        output_stream_TDATA => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TDATA,
        output_stream_TVALID => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TVALID,
        output_stream_TREADY => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TREADY,
        output_stream_TKEEP => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TKEEP,
        output_stream_TSTRB => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TSTRB,
        output_stream_TUSER => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TUSER,
        output_stream_TLAST => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TLAST,
        output_stream_TID => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TID,
        output_stream_TDEST => image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TDEST);

    img_0_rows_V_channel_U : component FIFO_image_filter_fh_img_0_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => img_0_rows_V_channel_U_ap_dummy_ce,
        if_din => img_0_rows_V_channel_din,
        if_full_n => img_0_rows_V_channel_full_n,
        if_write => img_0_rows_V_channel_write,
        if_dout => img_0_rows_V_channel_dout,
        if_empty_n => img_0_rows_V_channel_empty_n,
        if_read => img_0_rows_V_channel_read);

    img_0_cols_V_channel_U : component FIFO_image_filter_fh_img_0_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => img_0_cols_V_channel_U_ap_dummy_ce,
        if_din => img_0_cols_V_channel_din,
        if_full_n => img_0_cols_V_channel_full_n,
        if_write => img_0_cols_V_channel_write,
        if_dout => img_0_cols_V_channel_dout,
        if_empty_n => img_0_cols_V_channel_empty_n,
        if_read => img_0_cols_V_channel_read);

    img_2_rows_V_channel_U : component FIFO_image_filter_fh_img_2_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_2_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => img_2_rows_V_channel_U_ap_dummy_ce,
        if_din => img_2_rows_V_channel_din,
        if_full_n => img_2_rows_V_channel_full_n,
        if_write => img_2_rows_V_channel_write,
        if_dout => img_2_rows_V_channel_dout,
        if_empty_n => img_2_rows_V_channel_empty_n,
        if_read => img_2_rows_V_channel_read);

    img_2_cols_V_channel_U : component FIFO_image_filter_fh_img_2_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_2_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => img_2_cols_V_channel_U_ap_dummy_ce,
        if_din => img_2_cols_V_channel_din,
        if_full_n => img_2_cols_V_channel_full_n,
        if_write => img_2_cols_V_channel_write,
        if_dout => img_2_cols_V_channel_dout,
        if_empty_n => img_2_cols_V_channel_empty_n,
        if_read => img_2_cols_V_channel_read);

    img_0_data_stream_0_V_U : component FIFO_image_filter_fh_img_0_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_0_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_0_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_V_full_n,
        if_write => img_0_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_V_dout,
        if_empty_n => img_0_data_stream_0_V_empty_n,
        if_read => img_0_data_stream_0_V_read);

    img_1_data_stream_0_V_U : component FIFO_image_filter_fh_img_1_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_1_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_1_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_1_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_V_full_n,
        if_write => img_1_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_V_dout,
        if_empty_n => img_1_data_stream_0_V_empty_n,
        if_read => img_1_data_stream_0_V_read);

    FILTER_SIZE_4_loc_channel_U : component FIFO_image_filter_fh_FILTER_SIZE_4_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => FILTER_SIZE_4_loc_channel_U_ap_dummy_ce,
        if_write_ce => FILTER_SIZE_4_loc_channel_U_ap_dummy_ce,
        if_din => FILTER_SIZE_4_loc_channel_din,
        if_full_n => FILTER_SIZE_4_loc_channel_full_n,
        if_write => FILTER_SIZE_4_loc_channel_write,
        if_dout => FILTER_SIZE_4_loc_channel_dout,
        if_empty_n => FILTER_SIZE_4_loc_channel_empty_n,
        if_read => FILTER_SIZE_4_loc_channel_read);

    img_12_data_stream_0_V_U : component FIFO_image_filter_fh_img_12_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_12_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_12_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_12_data_stream_0_V_din,
        if_full_n => img_12_data_stream_0_V_full_n,
        if_write => img_12_data_stream_0_V_write,
        if_dout => img_12_data_stream_0_V_dout,
        if_empty_n => img_12_data_stream_0_V_empty_n,
        if_read => img_12_data_stream_0_V_read);

    img_2_data_stream_0_V_U : component FIFO_image_filter_fh_img_2_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_2_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_2_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_2_data_stream_0_V_din,
        if_full_n => img_2_data_stream_0_V_full_n,
        if_write => img_2_data_stream_0_V_write,
        if_dout => img_2_data_stream_0_V_dout,
        if_empty_n => img_2_data_stream_0_V_empty_n,
        if_read => img_2_data_stream_0_V_read);





    -- ap_reg_procdone_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0 assign process. --
    ap_reg_procdone_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_fh_Block_Mat_exit71218_proc_U0 assign process. --
    ap_reg_procdone_image_filter_fh_Block_Mat_exit71218_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_fh_Block_Mat_exit71218_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_fh_Block_Mat_exit71218_proc_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_fh_Block_Mat_exit71218_proc_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_fh_Block_Mat_exit71218_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_fh_Block_Mat_exit712_proc_U0 assign process. --
    ap_reg_procdone_image_filter_fh_Block_Mat_exit712_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_fh_Block_Mat_exit712_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_fh_Block_Mat_exit712_proc_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_fh_Block_Mat_exit712_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_fh_FilterTest_480_640_1_U0 assign process. --
    ap_reg_procdone_image_filter_fh_FilterTest_480_640_1_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_fh_FilterTest_480_640_1_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_fh_FilterTest_480_640_1_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_fh_FilterTest_480_640_1_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_fh_FilterTest_480_640_1_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_fh_Loop_1_proc_U0 assign process. --
    ap_reg_procdone_image_filter_fh_Loop_1_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_fh_Loop_1_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_fh_Loop_1_proc_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_fh_Loop_1_proc_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_fh_Loop_1_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_fh_Mat2AXIvideo_32_480_640_5_U0 assign process. --
    ap_reg_procdone_image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_fh_Mat2AXIvideo_32_480_640_5_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_fh_Mat2AXIvideo_32_480_640_5_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_fh_Mat2AXIvideo_32_480_640_5_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_fh_PadImage_480_640_51_U0 assign process. --
    ap_reg_procdone_image_filter_fh_PadImage_480_640_51_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_fh_PadImage_480_640_51_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_fh_PadImage_480_640_51_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_fh_PadImage_480_640_51_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_fh_PadImage_480_640_51_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready assign process. --
    ap_reg_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready)) then 
                    ap_reg_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready assign process. --
    ap_reg_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready)) then 
                    ap_reg_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready assign process. --
    ap_reg_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready)) then 
                    ap_reg_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_0_cols_V_channel_full_n assign process. --
    ap_reg_ready_img_0_cols_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_img_0_cols_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_done) and (ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_continue))) then 
                    ap_reg_ready_img_0_cols_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_done) and (ap_const_logic_1 = img_0_cols_V_channel_full_n))) then 
                    ap_reg_ready_img_0_cols_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_0_rows_V_channel_full_n assign process. --
    ap_reg_ready_img_0_rows_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_img_0_rows_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_done) and (ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_continue))) then 
                    ap_reg_ready_img_0_rows_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_done) and (ap_const_logic_1 = img_0_rows_V_channel_full_n))) then 
                    ap_reg_ready_img_0_rows_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_2_cols_V_channel_full_n assign process. --
    ap_reg_ready_img_2_cols_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_img_2_cols_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_done) and (ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_continue))) then 
                    ap_reg_ready_img_2_cols_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_done) and (ap_const_logic_1 = img_2_cols_V_channel_full_n))) then 
                    ap_reg_ready_img_2_cols_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_2_rows_V_channel_full_n assign process. --
    ap_reg_ready_img_2_rows_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_img_2_rows_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_done) and (ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_continue))) then 
                    ap_reg_ready_img_2_rows_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_done) and (ap_const_logic_1 = img_2_rows_V_channel_full_n))) then 
                    ap_reg_ready_img_2_rows_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- image_filter_fh_Loop_1_proc_U0_ap_start assign process. --
    image_filter_fh_Loop_1_proc_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                image_filter_fh_Loop_1_proc_U0_ap_start <= ap_const_logic_0;
            else
                image_filter_fh_Loop_1_proc_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- image_filter_fh_PadImage_480_640_51_U0_ap_start assign process. --
    image_filter_fh_PadImage_480_640_51_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                image_filter_fh_PadImage_480_640_51_U0_ap_start <= ap_const_logic_0;
            else
                image_filter_fh_PadImage_480_640_51_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    FILTER_SIZE_4_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    FILTER_SIZE_4_loc_channel_din <= image_filter_fh_Block_Mat_exit71218_proc_U0_ap_return;
    FILTER_SIZE_4_loc_channel_read <= image_filter_fh_FilterTest_480_640_1_U0_ap_ready;
    FILTER_SIZE_4_loc_channel_write <= ap_chn_write_image_filter_fh_Block_Mat_exit71218_proc_U0_FILTER_SIZE_4_loc_channel;
    ap_chn_write_image_filter_fh_Block_Mat_exit71218_proc_U0_FILTER_SIZE_4_loc_channel <= image_filter_fh_Block_Mat_exit71218_proc_U0_ap_done;

    -- ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_0_cols_V_channel assign process. --
    ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_0_cols_V_channel_assign_proc : process(image_filter_fh_Block_Mat_exit712_proc_U0_ap_done, ap_reg_ready_img_0_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_0_cols_V_channel_full_n)) then 
            ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_0_cols_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_0_cols_V_channel <= image_filter_fh_Block_Mat_exit712_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_0_rows_V_channel assign process. --
    ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_0_rows_V_channel_assign_proc : process(image_filter_fh_Block_Mat_exit712_proc_U0_ap_done, ap_reg_ready_img_0_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_0_rows_V_channel_full_n)) then 
            ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_0_rows_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_0_rows_V_channel <= image_filter_fh_Block_Mat_exit712_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_2_cols_V_channel assign process. --
    ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_2_cols_V_channel_assign_proc : process(image_filter_fh_Block_Mat_exit712_proc_U0_ap_done, ap_reg_ready_img_2_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_2_cols_V_channel_full_n)) then 
            ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_2_cols_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_2_cols_V_channel <= image_filter_fh_Block_Mat_exit712_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_2_rows_V_channel assign process. --
    ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_2_rows_V_channel_assign_proc : process(image_filter_fh_Block_Mat_exit712_proc_U0_ap_done, ap_reg_ready_img_2_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_2_rows_V_channel_full_n)) then 
            ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_2_rows_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_2_rows_V_channel <= image_filter_fh_Block_Mat_exit712_proc_U0_ap_done;
        end if; 
    end process;

    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(image_filter_fh_Block_Mat_exit712_proc_U0_ap_idle, image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_idle, image_filter_fh_PadImage_480_640_51_U0_ap_idle, image_filter_fh_Block_Mat_exit71218_proc_U0_ap_idle, image_filter_fh_FilterTest_480_640_1_U0_ap_idle, image_filter_fh_Loop_1_proc_U0_ap_idle, image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_idle, img_0_rows_V_channel_empty_n, img_0_cols_V_channel_empty_n, img_2_rows_V_channel_empty_n, img_2_cols_V_channel_empty_n, FILTER_SIZE_4_loc_channel_empty_n)
    begin
        if (((ap_const_logic_1 = image_filter_fh_Block_Mat_exit712_proc_U0_ap_idle) and (ap_const_logic_1 = image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_idle) and (ap_const_logic_1 = image_filter_fh_PadImage_480_640_51_U0_ap_idle) and (ap_const_logic_1 = image_filter_fh_Block_Mat_exit71218_proc_U0_ap_idle) and (ap_const_logic_1 = image_filter_fh_FilterTest_480_640_1_U0_ap_idle) and (ap_const_logic_1 = image_filter_fh_Loop_1_proc_U0_ap_idle) and (ap_const_logic_1 = image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_idle) and (ap_const_logic_0 = img_0_rows_V_channel_empty_n) and (ap_const_logic_0 = img_0_cols_V_channel_empty_n) and (ap_const_logic_0 = img_2_rows_V_channel_empty_n) and (ap_const_logic_0 = img_2_cols_V_channel_empty_n) and (ap_const_logic_0 = FILTER_SIZE_4_loc_channel_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_done)
    begin
        if ((ap_const_logic_1 = image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready assign process. --
    ap_sig_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready_assign_proc : process(image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready, ap_reg_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready)) then 
            ap_sig_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready <= image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready;
        else 
            ap_sig_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready assign process. --
    ap_sig_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready_assign_proc : process(image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready, ap_reg_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready)) then 
            ap_sig_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready <= image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready;
        else 
            ap_sig_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready assign process. --
    ap_sig_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready_assign_proc : process(image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready, ap_reg_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready)) then 
            ap_sig_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready <= image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready;
        else 
            ap_sig_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_img_0_cols_V_channel_full_n assign process. --
    ap_sig_ready_img_0_cols_V_channel_full_n_assign_proc : process(img_0_cols_V_channel_full_n, ap_reg_ready_img_0_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_img_0_cols_V_channel_full_n)) then 
            ap_sig_ready_img_0_cols_V_channel_full_n <= img_0_cols_V_channel_full_n;
        else 
            ap_sig_ready_img_0_cols_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_img_0_rows_V_channel_full_n assign process. --
    ap_sig_ready_img_0_rows_V_channel_full_n_assign_proc : process(img_0_rows_V_channel_full_n, ap_reg_ready_img_0_rows_V_channel_full_n)
    begin
        if ((ap_reg_ready_img_0_rows_V_channel_full_n = ap_const_logic_0)) then 
            ap_sig_ready_img_0_rows_V_channel_full_n <= img_0_rows_V_channel_full_n;
        else 
            ap_sig_ready_img_0_rows_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_img_2_cols_V_channel_full_n assign process. --
    ap_sig_ready_img_2_cols_V_channel_full_n_assign_proc : process(img_2_cols_V_channel_full_n, ap_reg_ready_img_2_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_img_2_cols_V_channel_full_n)) then 
            ap_sig_ready_img_2_cols_V_channel_full_n <= img_2_cols_V_channel_full_n;
        else 
            ap_sig_ready_img_2_cols_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_img_2_rows_V_channel_full_n assign process. --
    ap_sig_ready_img_2_rows_V_channel_full_n_assign_proc : process(img_2_rows_V_channel_full_n, ap_reg_ready_img_2_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_img_2_rows_V_channel_full_n)) then 
            ap_sig_ready_img_2_rows_V_channel_full_n <= img_2_rows_V_channel_full_n;
        else 
            ap_sig_ready_img_2_rows_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_start_in_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_start assign process. --
    ap_sig_start_in_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready))) then 
            ap_sig_start_in_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_start assign process. --
    ap_sig_start_in_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready))) then 
            ap_sig_start_in_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_image_filter_fh_Block_Mat_exit712_proc_U0_ap_start assign process. --
    ap_sig_start_in_image_filter_fh_Block_Mat_exit712_proc_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready)
    begin
        if (((ap_const_logic_0 = ap_reg_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready) and (ap_const_logic_1 = ap_start))) then 
            ap_sig_start_in_image_filter_fh_Block_Mat_exit712_proc_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_image_filter_fh_Block_Mat_exit712_proc_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_top_allready assign process. --
    ap_sig_top_allready_assign_proc : process(ap_sig_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready, ap_sig_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready, ap_sig_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_image_filter_fh_Block_Mat_exit712_proc_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_ready))) then 
            ap_sig_top_allready <= ap_const_logic_1;
        else 
            ap_sig_top_allready <= ap_const_logic_0;
        end if; 
    end process;

    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_continue <= ap_const_logic_1;
    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_start <= (img_0_rows_V_channel_empty_n and img_0_cols_V_channel_empty_n and ap_sig_start_in_image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_start);
    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_cols_V_read <= img_0_cols_V_channel_dout;
    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_data_stream_V_full_n <= img_0_data_stream_0_V_full_n;
    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_rows_V_read <= img_0_rows_V_channel_dout;
    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TDATA <= input_stream_TDATA;
    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TDEST <= input_stream_TDEST;
    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TID <= input_stream_TID;
    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TKEEP <= input_stream_TKEEP;
    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TLAST <= input_stream_TLAST;
    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TSTRB <= input_stream_TSTRB;
    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TUSER <= input_stream_TUSER;
    image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TVALID <= input_stream_TVALID;
    image_filter_fh_Block_Mat_exit71218_proc_U0_ap_continue <= FILTER_SIZE_4_loc_channel_full_n;
    image_filter_fh_Block_Mat_exit71218_proc_U0_ap_start <= ap_sig_start_in_image_filter_fh_Block_Mat_exit71218_proc_U0_ap_start;
    image_filter_fh_Block_Mat_exit71218_proc_U0_filter_size <= filter_size;

    -- image_filter_fh_Block_Mat_exit712_proc_U0_ap_continue assign process. --
    image_filter_fh_Block_Mat_exit712_proc_U0_ap_continue_assign_proc : process(ap_sig_ready_img_0_rows_V_channel_full_n, ap_sig_ready_img_0_cols_V_channel_full_n, ap_sig_ready_img_2_rows_V_channel_full_n, ap_sig_ready_img_2_cols_V_channel_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_img_0_rows_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_img_0_cols_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_img_2_rows_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_img_2_cols_V_channel_full_n))) then 
            image_filter_fh_Block_Mat_exit712_proc_U0_ap_continue <= ap_const_logic_1;
        else 
            image_filter_fh_Block_Mat_exit712_proc_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    image_filter_fh_Block_Mat_exit712_proc_U0_ap_start <= ap_sig_start_in_image_filter_fh_Block_Mat_exit712_proc_U0_ap_start;
    image_filter_fh_Block_Mat_exit712_proc_U0_cols <= cols;
    image_filter_fh_Block_Mat_exit712_proc_U0_rows <= rows;
    image_filter_fh_FilterTest_480_640_1_U0_ap_continue <= ap_const_logic_1;
    image_filter_fh_FilterTest_480_640_1_U0_ap_start <= FILTER_SIZE_4_loc_channel_empty_n;
    image_filter_fh_FilterTest_480_640_1_U0_in_data_stream_V_dout <= img_1_data_stream_0_V_dout;
    image_filter_fh_FilterTest_480_640_1_U0_in_data_stream_V_empty_n <= img_1_data_stream_0_V_empty_n;
    image_filter_fh_FilterTest_480_640_1_U0_out_data_stream_V_full_n <= img_12_data_stream_0_V_full_n;
    image_filter_fh_FilterTest_480_640_1_U0_p_read <= FILTER_SIZE_4_loc_channel_dout;
    image_filter_fh_Loop_1_proc_U0_ap_continue <= ap_const_logic_1;
    image_filter_fh_Loop_1_proc_U0_img_12_data_stream_0_V_dout <= img_12_data_stream_0_V_dout;
    image_filter_fh_Loop_1_proc_U0_img_12_data_stream_0_V_empty_n <= img_12_data_stream_0_V_empty_n;
    image_filter_fh_Loop_1_proc_U0_img_2_data_stream_0_V_full_n <= img_2_data_stream_0_V_full_n;
    image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_continue <= ap_sig_hs_continue;
    image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_start <= (img_2_rows_V_channel_empty_n and img_2_cols_V_channel_empty_n);
    image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_cols_V_read <= img_2_cols_V_channel_dout;
    image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_data_stream_V_dout <= img_2_data_stream_0_V_dout;
    image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_data_stream_V_empty_n <= img_2_data_stream_0_V_empty_n;
    image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_rows_V_read <= img_2_rows_V_channel_dout;
    image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TREADY <= output_stream_TREADY;
    image_filter_fh_PadImage_480_640_51_U0_ap_continue <= ap_const_logic_1;
    image_filter_fh_PadImage_480_640_51_U0_in_data_stream_V_dout <= img_0_data_stream_0_V_dout;
    image_filter_fh_PadImage_480_640_51_U0_in_data_stream_V_empty_n <= img_0_data_stream_0_V_empty_n;
    image_filter_fh_PadImage_480_640_51_U0_out_data_stream_V_full_n <= img_1_data_stream_0_V_full_n;
    image_filter_fh_control_bus_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_cols_V_channel_din <= image_filter_fh_Block_Mat_exit712_proc_U0_ap_return_1;
    img_0_cols_V_channel_read <= image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready;
    img_0_cols_V_channel_write <= ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_0_cols_V_channel;
    img_0_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_data_stream_0_V_din <= image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_data_stream_V_din;
    img_0_data_stream_0_V_read <= image_filter_fh_PadImage_480_640_51_U0_in_data_stream_V_read;
    img_0_data_stream_0_V_write <= image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_img_data_stream_V_write;
    img_0_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_rows_V_channel_din <= image_filter_fh_Block_Mat_exit712_proc_U0_ap_return_0;
    img_0_rows_V_channel_read <= image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_ap_ready;
    img_0_rows_V_channel_write <= ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_0_rows_V_channel;
    img_12_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_12_data_stream_0_V_din <= image_filter_fh_FilterTest_480_640_1_U0_out_data_stream_V_din;
    img_12_data_stream_0_V_read <= image_filter_fh_Loop_1_proc_U0_img_12_data_stream_0_V_read;
    img_12_data_stream_0_V_write <= image_filter_fh_FilterTest_480_640_1_U0_out_data_stream_V_write;
    img_1_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_1_data_stream_0_V_din <= image_filter_fh_PadImage_480_640_51_U0_out_data_stream_V_din;
    img_1_data_stream_0_V_read <= image_filter_fh_FilterTest_480_640_1_U0_in_data_stream_V_read;
    img_1_data_stream_0_V_write <= image_filter_fh_PadImage_480_640_51_U0_out_data_stream_V_write;
    img_2_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_2_cols_V_channel_din <= image_filter_fh_Block_Mat_exit712_proc_U0_ap_return_3;
    img_2_cols_V_channel_read <= image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_ready;
    img_2_cols_V_channel_write <= ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_2_cols_V_channel;
    img_2_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_2_data_stream_0_V_din <= image_filter_fh_Loop_1_proc_U0_img_2_data_stream_0_V_din;
    img_2_data_stream_0_V_read <= image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_img_data_stream_V_read;
    img_2_data_stream_0_V_write <= image_filter_fh_Loop_1_proc_U0_img_2_data_stream_0_V_write;
    img_2_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_2_rows_V_channel_din <= image_filter_fh_Block_Mat_exit712_proc_U0_ap_return_2;
    img_2_rows_V_channel_read <= image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_ap_ready;
    img_2_rows_V_channel_write <= ap_chn_write_image_filter_fh_Block_Mat_exit712_proc_U0_img_2_rows_V_channel;
    input_stream_TREADY <= image_filter_fh_AXIvideo2Mat_32_480_640_5_U0_input_stream_TREADY;
    output_stream_TDATA <= image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TDATA;
    output_stream_TDEST <= image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TDEST;
    output_stream_TID <= image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TID;
    output_stream_TKEEP <= image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TKEEP;
    output_stream_TLAST <= image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TLAST;
    output_stream_TSTRB <= image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TSTRB;
    output_stream_TUSER <= image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TUSER;
    output_stream_TVALID <= image_filter_fh_Mat2AXIvideo_32_480_640_5_U0_output_stream_TVALID;
end behav;
