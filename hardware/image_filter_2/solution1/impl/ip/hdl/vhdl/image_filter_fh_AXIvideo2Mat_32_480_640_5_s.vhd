-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter_fh_AXIvideo2Mat_32_480_640_5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_stream_TVALID : IN STD_LOGIC;
    input_stream_TREADY : OUT STD_LOGIC;
    input_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_data_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_data_stream_V_full_n : IN STD_LOGIC;
    img_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of image_filter_fh_AXIvideo2Mat_32_480_640_5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_pp1_stg0_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_true : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal eol_1_reg_152 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_reg_174 : STD_LOGIC_VECTOR (11 downto 0);
    signal eol_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_2_reg_197 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_2_reg_221 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_67 : BOOLEAN;
    signal tmp_data_V_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_79 : BOOLEAN;
    signal tmp_last_V_reg_359 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_93 : BOOLEAN;
    signal i_V_fu_292_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_375 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_380 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_104 : BOOLEAN;
    signal brmerge_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_112 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_119 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal j_V_fu_303_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_138 : BOOLEAN;
    signal ap_sig_bdd_143 : BOOLEAN;
    signal axi_last_V_3_reg_232 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V1_reg_121 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_161 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_168 : BOOLEAN;
    signal axi_data_V_3_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_data_V1_reg_131 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_141 : STD_LOGIC_VECTOR (11 downto 0);
    signal eol_1_phi_fu_155_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_phi_fu_166_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_phi_fu_189_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_axi_last_V_2_reg_197pp1_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_p_Val2_s_reg_209pp1_it0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_eol_2_reg_221pp1_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_1_mux_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_3_reg_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal sof_1_fu_80 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sof_2_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_fu_278_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_bdd_111 : BOOLEAN;
    signal ap_sig_bdd_191 : BOOLEAN;
    signal ap_sig_bdd_130 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_287_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond_fu_298_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_287_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_fu_298_p2 = ap_const_lv1_0) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_287_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond_fu_298_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- axi_data_V1_reg_131 assign process. --
    axi_data_V1_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_data_V1_reg_131 <= tmp_data_V_reg_351;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_data_V1_reg_131 <= axi_data_V_3_reg_244;
            end if; 
        end if;
    end process;

    -- axi_data_V_1_reg_163 assign process. --
    axi_data_V_1_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_reg_380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                axi_data_V_1_reg_163 <= p_Val2_s_reg_209;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_287_p2 = ap_const_lv1_0))) then 
                axi_data_V_1_reg_163 <= axi_data_V1_reg_131;
            end if; 
        end if;
    end process;

    -- axi_data_V_3_reg_244 assign process. --
    axi_data_V_3_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond_fu_298_p2 = ap_const_lv1_0)))) then 
                axi_data_V_3_reg_244 <= axi_data_V_1_phi_fu_166_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_256) and not(ap_sig_bdd_143))) then 
                axi_data_V_3_reg_244 <= input_stream_TDATA;
            end if; 
        end if;
    end process;

    -- axi_last_V1_reg_121 assign process. --
    axi_last_V1_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_last_V1_reg_121 <= tmp_last_V_reg_359;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_last_V1_reg_121 <= axi_last_V_3_reg_232;
            end if; 
        end if;
    end process;

    -- axi_last_V_2_reg_197 assign process. --
    axi_last_V_2_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_130) then
                if (ap_sig_bdd_191) then 
                    axi_last_V_2_reg_197 <= eol_1_phi_fu_155_p4;
                elsif (ap_sig_bdd_111) then 
                    axi_last_V_2_reg_197 <= input_stream_TLAST;
                elsif ((ap_true = ap_true)) then 
                    axi_last_V_2_reg_197 <= ap_reg_phiprechg_axi_last_V_2_reg_197pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- axi_last_V_3_reg_232 assign process. --
    axi_last_V_3_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond_fu_298_p2 = ap_const_lv1_0)))) then 
                axi_last_V_3_reg_232 <= eol_1_phi_fu_155_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_256) and not(ap_sig_bdd_143))) then 
                axi_last_V_3_reg_232 <= input_stream_TLAST;
            end if; 
        end if;
    end process;

    -- eol_1_reg_152 assign process. --
    eol_1_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_reg_380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                eol_1_reg_152 <= axi_last_V_2_reg_197;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_287_p2 = ap_const_lv1_0))) then 
                eol_1_reg_152 <= axi_last_V1_reg_121;
            end if; 
        end if;
    end process;

    -- eol_2_reg_221 assign process. --
    eol_2_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_130) then
                if (ap_sig_bdd_191) then 
                    eol_2_reg_221 <= axi_last_V_1_mux_fu_324_p2;
                elsif (ap_sig_bdd_111) then 
                    eol_2_reg_221 <= input_stream_TLAST;
                elsif ((ap_true = ap_true)) then 
                    eol_2_reg_221 <= ap_reg_phiprechg_eol_2_reg_221pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- eol_3_reg_256 assign process. --
    eol_3_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond_fu_298_p2 = ap_const_lv1_0)))) then 
                eol_3_reg_256 <= eol_phi_fu_189_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_256) and not(ap_sig_bdd_143))) then 
                eol_3_reg_256 <= input_stream_TLAST;
            end if; 
        end if;
    end process;

    -- eol_reg_185 assign process. --
    eol_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_reg_380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                eol_reg_185 <= eol_2_reg_221;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_287_p2 = ap_const_lv1_0))) then 
                eol_reg_185 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- p_1_reg_174 assign process. --
    p_1_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                p_1_reg_174 <= j_V_fu_303_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_287_p2 = ap_const_lv1_0))) then 
                p_1_reg_174 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- p_Val2_s_reg_209 assign process. --
    p_Val2_s_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_130) then
                if (ap_sig_bdd_191) then 
                    p_Val2_s_reg_209 <= axi_data_V_1_phi_fu_166_p4;
                elsif (ap_sig_bdd_111) then 
                    p_Val2_s_reg_209 <= input_stream_TDATA;
                elsif ((ap_true = ap_true)) then 
                    p_Val2_s_reg_209 <= ap_reg_phiprechg_p_Val2_s_reg_209pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- p_s_reg_141 assign process. --
    p_s_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                p_s_reg_141 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                p_s_reg_141 <= i_V_reg_375;
            end if; 
        end if;
    end process;

    -- sof_1_fu_80 assign process. --
    sof_1_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                sof_1_fu_80 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                sof_1_fu_80 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                exitcond_reg_380 <= exitcond_fu_298_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_V_reg_375 <= i_V_fu_292_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((input_stream_TVALID = ap_const_logic_0)))) then
                tmp_data_V_reg_351 <= input_stream_TDATA;
                tmp_last_V_reg_359 <= input_stream_TLAST;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, input_stream_TVALID, ap_sig_bdd_67, exitcond1_fu_287_p2, exitcond_fu_298_p2, ap_sig_bdd_112, ap_reg_ppiten_pp1_it0, ap_sig_bdd_119, ap_reg_ppiten_pp1_it1, ap_sig_bdd_143, eol_3_reg_256, tmp_user_V_fu_278_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_67)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((input_stream_TVALID = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_user_V_fu_278_p1))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not((input_stream_TVALID = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_user_V_fu_278_p1)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((exitcond1_fu_287_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_pp1_stg0_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond_fu_298_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond_fu_298_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_st7_fsm_5 => 
                if (((ap_const_lv1_0 = eol_3_reg_256) and not(ap_sig_bdd_143))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                elsif ((not(ap_sig_bdd_143) and not((ap_const_lv1_0 = eol_3_reg_256)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_st8_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond1_fu_287_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_287_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond1_fu_287_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_287_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_axi_last_V_2_reg_197pp1_it0 <= "X";
    ap_reg_phiprechg_eol_2_reg_221pp1_it0 <= "X";
    ap_reg_phiprechg_p_Val2_s_reg_209pp1_it0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    -- ap_sig_bdd_104 assign process. --
    ap_sig_bdd_104_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_104 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_111 assign process. --
    ap_sig_bdd_111_assign_proc : process(exitcond_fu_298_p2, brmerge_fu_312_p2)
    begin
                ap_sig_bdd_111 <= ((exitcond_fu_298_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_312_p2));
    end process;


    -- ap_sig_bdd_112 assign process. --
    ap_sig_bdd_112_assign_proc : process(input_stream_TVALID, exitcond_fu_298_p2, brmerge_fu_312_p2)
    begin
                ap_sig_bdd_112 <= ((input_stream_TVALID = ap_const_logic_0) and (exitcond_fu_298_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_312_p2));
    end process;


    -- ap_sig_bdd_119 assign process. --
    ap_sig_bdd_119_assign_proc : process(img_data_stream_V_full_n, exitcond_reg_380)
    begin
                ap_sig_bdd_119 <= ((img_data_stream_V_full_n = ap_const_logic_0) and (exitcond_reg_380 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_130 assign process. --
    ap_sig_bdd_130_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_112, ap_reg_ppiten_pp1_it0, ap_sig_bdd_119, ap_reg_ppiten_pp1_it1)
    begin
                ap_sig_bdd_130 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))));
    end process;


    -- ap_sig_bdd_138 assign process. --
    ap_sig_bdd_138_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_138 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_143 assign process. --
    ap_sig_bdd_143_assign_proc : process(input_stream_TVALID, eol_3_reg_256)
    begin
                ap_sig_bdd_143 <= ((input_stream_TVALID = ap_const_logic_0) and (ap_const_lv1_0 = eol_3_reg_256));
    end process;


    -- ap_sig_bdd_161 assign process. --
    ap_sig_bdd_161_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_161 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_168 assign process. --
    ap_sig_bdd_168_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_168 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_191 assign process. --
    ap_sig_bdd_191_assign_proc : process(exitcond_fu_298_p2, brmerge_fu_312_p2)
    begin
                ap_sig_bdd_191 <= ((exitcond_fu_298_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = brmerge_fu_312_p2)));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_67 assign process. --
    ap_sig_bdd_67_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_67 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_79 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_93 assign process. --
    ap_sig_bdd_93_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_93 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_4_assign_proc : process(ap_sig_bdd_104)
    begin
        if (ap_sig_bdd_104) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_79)
    begin
        if (ap_sig_bdd_79) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_168)
    begin
        if (ap_sig_bdd_168) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_93)
    begin
        if (ap_sig_bdd_93) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_5 assign process. --
    ap_sig_cseq_ST_st7_fsm_5_assign_proc : process(ap_sig_bdd_138)
    begin
        if (ap_sig_bdd_138) then 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_6 assign process. --
    ap_sig_cseq_ST_st8_fsm_6_assign_proc : process(ap_sig_bdd_161)
    begin
        if (ap_sig_bdd_161) then 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- axi_data_V_1_phi_fu_166_p4 assign process. --
    axi_data_V_1_phi_fu_166_p4_assign_proc : process(axi_data_V_1_reg_163, p_Val2_s_reg_209, exitcond_reg_380, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_reg_380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            axi_data_V_1_phi_fu_166_p4 <= p_Val2_s_reg_209;
        else 
            axi_data_V_1_phi_fu_166_p4 <= axi_data_V_1_reg_163;
        end if; 
    end process;

    axi_last_V_1_mux_fu_324_p2 <= (eol_1_phi_fu_155_p4 or not_sof_2_fu_318_p2);
    brmerge_fu_312_p2 <= (sof_1_fu_80 or eol_phi_fu_189_p4);

    -- eol_1_phi_fu_155_p4 assign process. --
    eol_1_phi_fu_155_p4_assign_proc : process(eol_1_reg_152, axi_last_V_2_reg_197, exitcond_reg_380, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_reg_380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            eol_1_phi_fu_155_p4 <= axi_last_V_2_reg_197;
        else 
            eol_1_phi_fu_155_p4 <= eol_1_reg_152;
        end if; 
    end process;


    -- eol_phi_fu_189_p4 assign process. --
    eol_phi_fu_189_p4_assign_proc : process(eol_reg_185, eol_2_reg_221, exitcond_reg_380, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_reg_380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            eol_phi_fu_189_p4 <= eol_2_reg_221;
        else 
            eol_phi_fu_189_p4 <= eol_reg_185;
        end if; 
    end process;

    exitcond1_fu_287_p2 <= "1" when (p_s_reg_141 = img_rows_V_read) else "0";
    exitcond_fu_298_p2 <= "1" when (p_1_reg_174 = img_cols_V_read) else "0";
    i_V_fu_292_p2 <= std_logic_vector(unsigned(p_s_reg_141) + unsigned(ap_const_lv12_1));
    img_data_stream_V_din <= p_Val2_s_reg_209;

    -- img_data_stream_V_write assign process. --
    img_data_stream_V_write_assign_proc : process(exitcond_reg_380, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_112, ap_reg_ppiten_pp1_it0, ap_sig_bdd_119, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_reg_380 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            img_data_stream_V_write <= ap_const_logic_1;
        else 
            img_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    -- input_stream_TREADY assign process. --
    input_stream_TREADY_assign_proc : process(input_stream_TVALID, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_298_p2, ap_sig_cseq_ST_pp1_stg0_fsm_4, brmerge_fu_312_p2, ap_sig_bdd_112, ap_reg_ppiten_pp1_it0, ap_sig_bdd_119, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_st7_fsm_5, ap_sig_bdd_143, eol_3_reg_256)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((input_stream_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_256) and not(ap_sig_bdd_143)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_fu_298_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_312_p2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_112 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_119 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))))) then 
            input_stream_TREADY <= ap_const_logic_1;
        else 
            input_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_303_p2 <= std_logic_vector(unsigned(p_1_reg_174) + unsigned(ap_const_lv12_1));
    not_sof_2_fu_318_p2 <= (sof_1_fu_80 xor ap_const_lv1_1);
    tmp_user_V_fu_278_p1 <= input_stream_TUSER;
end behav;
