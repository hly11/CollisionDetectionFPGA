-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter_fh_Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_12_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    img_12_data_stream_0_V_empty_n : IN STD_LOGIC;
    img_12_data_stream_0_V_read : OUT STD_LOGIC;
    img_2_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_2_data_stream_0_V_full_n : IN STD_LOGIC;
    img_2_data_stream_0_V_write : OUT STD_LOGIC );
end;


architecture behav of image_filter_fh_Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st5_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_59949 : STD_LOGIC_VECTOR (18 downto 0) := "1011001100101001001";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_2B3 : STD_LOGIC_VECTOR (9 downto 0) := "1010110011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_1E0 : STD_LOGIC_VECTOR (9 downto 0) := "0111100000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal indvar_flatten_reg_72 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_0_i_reg_83 : STD_LOGIC_VECTOR (9 downto 0);
    signal asd_0_i_reg_94 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_flatten_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_168 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_50 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_168_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_197 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_67 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar_flatten_next_fu_112_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_0_i_mid2_fu_138_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_i_mid2_reg_177 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_187 : STD_LOGIC_VECTOR (0 downto 0);
    signal asd_fu_158_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_cond_i_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_95 : BOOLEAN;
    signal i_0_i_phi_fu_87_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i4_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_fu_132_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal asd_0_i_mid2_fu_124_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_162 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((exitcond_flatten_fu_106_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_95))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (exitcond_flatten_fu_106_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_95)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((exitcond_flatten_fu_106_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_95))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- asd_0_i_reg_94 assign process. --
    asd_0_i_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (exitcond_flatten_fu_106_p2 = ap_const_lv1_0))) then 
                asd_0_i_reg_94 <= asd_fu_158_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_95))) then 
                asd_0_i_reg_94 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- i_0_i_reg_83 assign process. --
    i_0_i_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (exitcond_flatten_reg_168 = ap_const_lv1_0))) then 
                i_0_i_reg_83 <= i_0_i_mid2_reg_177;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_95))) then 
                i_0_i_reg_83 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_72 assign process. --
    indvar_flatten_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (exitcond_flatten_fu_106_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_72 <= indvar_flatten_next_fu_112_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_95))) then 
                indvar_flatten_reg_72 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then
                ap_reg_ppstg_exitcond_flatten_reg_168_pp0_it1 <= exitcond_flatten_reg_168;
                exitcond_flatten_reg_168 <= exitcond_flatten_fu_106_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (exitcond_flatten_fu_106_p2 = ap_const_lv1_0))) then
                i_0_i_mid2_reg_177 <= i_0_i_mid2_fu_138_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (exitcond_flatten_reg_168 = ap_const_lv1_0))) then
                or_cond_i_reg_197 <= or_cond_i_fu_164_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (exitcond_flatten_fu_106_p2 = ap_const_lv1_0))) then
                tmp_5_reg_182 <= tmp_5_fu_146_p2;
                tmp_9_reg_187 <= tmp_9_fu_152_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_flatten_fu_106_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_bdd_67, ap_reg_ppiten_pp0_it2, ap_sig_bdd_95)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_95)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((exitcond_flatten_fu_106_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((exitcond_flatten_fu_106_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st5_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st5_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st5_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_162 assign process. --
    ap_sig_bdd_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_162 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_50 assign process. --
    ap_sig_bdd_50_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_50 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_67 assign process. --
    ap_sig_bdd_67_assign_proc : process(img_12_data_stream_0_V_empty_n, img_2_data_stream_0_V_full_n, ap_reg_ppstg_exitcond_flatten_reg_168_pp0_it1, or_cond_i_reg_197)
    begin
                ap_sig_bdd_67 <= (((img_12_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_reg_ppstg_exitcond_flatten_reg_168_pp0_it1 = ap_const_lv1_0)) or ((img_2_data_stream_0_V_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = or_cond_i_reg_197))));
    end process;


    -- ap_sig_bdd_95 assign process. --
    ap_sig_bdd_95_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_95 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_50)
    begin
        if (ap_sig_bdd_50) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_2 assign process. --
    ap_sig_cseq_ST_st5_fsm_2_assign_proc : process(ap_sig_bdd_162)
    begin
        if (ap_sig_bdd_162) then 
            ap_sig_cseq_ST_st5_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    asd_0_i_mid2_fu_124_p3 <= 
        ap_const_lv10_0 when (exitcond_i4_fu_118_p2(0) = '1') else 
        asd_0_i_reg_94;
    asd_fu_158_p2 <= std_logic_vector(unsigned(asd_0_i_mid2_fu_124_p3) + unsigned(ap_const_lv10_1));
    exitcond_flatten_fu_106_p2 <= "1" when (indvar_flatten_reg_72 = ap_const_lv19_59949) else "0";
    exitcond_i4_fu_118_p2 <= "1" when (asd_0_i_reg_94 = ap_const_lv10_2B3) else "0";
    i2_fu_132_p2 <= std_logic_vector(unsigned(i_0_i_phi_fu_87_p4) + unsigned(ap_const_lv10_1));
    i_0_i_mid2_fu_138_p3 <= 
        i2_fu_132_p2 when (exitcond_i4_fu_118_p2(0) = '1') else 
        i_0_i_phi_fu_87_p4;

    -- i_0_i_phi_fu_87_p4 assign process. --
    i_0_i_phi_fu_87_p4_assign_proc : process(i_0_i_reg_83, exitcond_flatten_reg_168, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_0_i_mid2_reg_177)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_168 = ap_const_lv1_0))) then 
            i_0_i_phi_fu_87_p4 <= i_0_i_mid2_reg_177;
        else 
            i_0_i_phi_fu_87_p4 <= i_0_i_reg_83;
        end if; 
    end process;


    -- img_12_data_stream_0_V_read assign process. --
    img_12_data_stream_0_V_read_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_168_pp0_it1, ap_sig_bdd_67, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_reg_ppstg_exitcond_flatten_reg_168_pp0_it1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then 
            img_12_data_stream_0_V_read <= ap_const_logic_1;
        else 
            img_12_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;

    img_2_data_stream_0_V_din <= img_12_data_stream_0_V_dout;

    -- img_2_data_stream_0_V_write assign process. --
    img_2_data_stream_0_V_write_assign_proc : process(or_cond_i_reg_197, ap_sig_bdd_67, ap_reg_ppiten_pp0_it2)
    begin
        if ((not((ap_const_lv1_0 = or_cond_i_reg_197)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_67 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then 
            img_2_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_2_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_112_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_72) + unsigned(ap_const_lv19_1));
    or_cond_i_fu_164_p2 <= (tmp_5_reg_182 and tmp_9_reg_187);
    tmp_5_fu_146_p2 <= "1" when (unsigned(i_0_i_mid2_fu_138_p3) < unsigned(ap_const_lv10_1E0)) else "0";
    tmp_9_fu_152_p2 <= "1" when (unsigned(asd_0_i_mid2_fu_124_p3) < unsigned(ap_const_lv10_280)) else "0";
end behav;
