// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module image_filter_fh_Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_12_data_stream_0_V_dout,
        img_12_data_stream_0_V_empty_n,
        img_12_data_stream_0_V_read,
        img_2_data_stream_0_V_din,
        img_2_data_stream_0_V_full_n,
        img_2_data_stream_0_V_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st5_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv19_0 = 19'b0000000000000000000;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv19_59949 = 19'b1011001100101001001;
parameter    ap_const_lv19_1 = 19'b1;
parameter    ap_const_lv10_2B3 = 10'b1010110011;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv10_1E0 = 10'b111100000;
parameter    ap_const_lv10_280 = 10'b1010000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] img_12_data_stream_0_V_dout;
input   img_12_data_stream_0_V_empty_n;
output   img_12_data_stream_0_V_read;
output  [31:0] img_2_data_stream_0_V_din;
input   img_2_data_stream_0_V_full_n;
output   img_2_data_stream_0_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_12_data_stream_0_V_read;
reg img_2_data_stream_0_V_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
reg   [18:0] indvar_flatten_reg_72;
reg   [9:0] i_0_i_reg_83;
reg   [9:0] asd_0_i_reg_94;
wire   [0:0] exitcond_flatten_fu_106_p2;
reg   [0:0] exitcond_flatten_reg_168;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_50;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_168_pp0_it1;
reg   [0:0] or_cond_i_reg_197;
reg    ap_sig_bdd_67;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
wire   [18:0] indvar_flatten_next_fu_112_p2;
wire   [9:0] i_0_i_mid2_fu_138_p3;
reg   [9:0] i_0_i_mid2_reg_177;
wire   [0:0] tmp_5_fu_146_p2;
reg   [0:0] tmp_5_reg_182;
wire   [0:0] tmp_9_fu_152_p2;
reg   [0:0] tmp_9_reg_187;
wire   [9:0] asd_fu_158_p2;
wire   [0:0] or_cond_i_fu_164_p2;
reg    ap_sig_bdd_95;
reg   [9:0] i_0_i_phi_fu_87_p4;
wire   [0:0] exitcond_i4_fu_118_p2;
wire   [9:0] i2_fu_132_p2;
wire   [9:0] asd_0_i_mid2_fu_124_p3;
reg    ap_sig_cseq_ST_st5_fsm_2;
reg    ap_sig_bdd_162;
reg   [2:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_2)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(exitcond_flatten_fu_106_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_95)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (exitcond_flatten_fu_106_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_95) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(exitcond_flatten_fu_106_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_95)) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (exitcond_flatten_fu_106_p2 == ap_const_lv1_0))) begin
        asd_0_i_reg_94 <= asd_fu_158_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_95)) begin
        asd_0_i_reg_94 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (exitcond_flatten_reg_168 == ap_const_lv1_0))) begin
        i_0_i_reg_83 <= i_0_i_mid2_reg_177;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_95)) begin
        i_0_i_reg_83 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (exitcond_flatten_fu_106_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_72 <= indvar_flatten_next_fu_112_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_95)) begin
        indvar_flatten_reg_72 <= ap_const_lv19_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
        ap_reg_ppstg_exitcond_flatten_reg_168_pp0_it1 <= exitcond_flatten_reg_168;
        exitcond_flatten_reg_168 <= exitcond_flatten_fu_106_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (exitcond_flatten_fu_106_p2 == ap_const_lv1_0))) begin
        i_0_i_mid2_reg_177 <= i_0_i_mid2_fu_138_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (exitcond_flatten_reg_168 == ap_const_lv1_0))) begin
        or_cond_i_reg_197 <= or_cond_i_fu_164_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (exitcond_flatten_fu_106_p2 == ap_const_lv1_0))) begin
        tmp_5_reg_182 <= tmp_5_fu_146_p2;
        tmp_9_reg_187 <= tmp_9_fu_152_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st5_fsm_2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_50)
begin
    if (ap_sig_bdd_50) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_2 assign process. ///
always @ (ap_sig_bdd_162)
begin
    if (ap_sig_bdd_162) begin
        ap_sig_cseq_ST_st5_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_2 = ap_const_logic_0;
    end
end

/// i_0_i_phi_fu_87_p4 assign process. ///
always @ (i_0_i_reg_83 or exitcond_flatten_reg_168 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or i_0_i_mid2_reg_177)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_168 == ap_const_lv1_0))) begin
        i_0_i_phi_fu_87_p4 = i_0_i_mid2_reg_177;
    end else begin
        i_0_i_phi_fu_87_p4 = i_0_i_reg_83;
    end
end

/// img_12_data_stream_0_V_read assign process. ///
always @ (ap_reg_ppstg_exitcond_flatten_reg_168_pp0_it1 or ap_sig_bdd_67 or ap_reg_ppiten_pp0_it2)
begin
    if (((ap_reg_ppstg_exitcond_flatten_reg_168_pp0_it1 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
        img_12_data_stream_0_V_read = ap_const_logic_1;
    end else begin
        img_12_data_stream_0_V_read = ap_const_logic_0;
    end
end

/// img_2_data_stream_0_V_write assign process. ///
always @ (or_cond_i_reg_197 or ap_sig_bdd_67 or ap_reg_ppiten_pp0_it2)
begin
    if ((~(ap_const_lv1_0 == or_cond_i_reg_197) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
        img_2_data_stream_0_V_write = ap_const_logic_1;
    end else begin
        img_2_data_stream_0_V_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond_flatten_fu_106_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_67 or ap_reg_ppiten_pp0_it2 or ap_sig_bdd_95)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_95) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(exitcond_flatten_fu_106_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_67 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(exitcond_flatten_fu_106_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st5_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_st5_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_162 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_162 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_50 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_50 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_67 assign process. ///
always @ (img_12_data_stream_0_V_empty_n or img_2_data_stream_0_V_full_n or ap_reg_ppstg_exitcond_flatten_reg_168_pp0_it1 or or_cond_i_reg_197)
begin
    ap_sig_bdd_67 = (((img_12_data_stream_0_V_empty_n == ap_const_logic_0) & (ap_reg_ppstg_exitcond_flatten_reg_168_pp0_it1 == ap_const_lv1_0)) | ((img_2_data_stream_0_V_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == or_cond_i_reg_197)));
end

/// ap_sig_bdd_95 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_95 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign asd_0_i_mid2_fu_124_p3 = ((exitcond_i4_fu_118_p2[0:0]===1'b1)? ap_const_lv10_0: asd_0_i_reg_94);
assign asd_fu_158_p2 = (asd_0_i_mid2_fu_124_p3 + ap_const_lv10_1);
assign exitcond_flatten_fu_106_p2 = (indvar_flatten_reg_72 == ap_const_lv19_59949? 1'b1: 1'b0);
assign exitcond_i4_fu_118_p2 = (asd_0_i_reg_94 == ap_const_lv10_2B3? 1'b1: 1'b0);
assign i2_fu_132_p2 = (i_0_i_phi_fu_87_p4 + ap_const_lv10_1);
assign i_0_i_mid2_fu_138_p3 = ((exitcond_i4_fu_118_p2[0:0]===1'b1)? i2_fu_132_p2: i_0_i_phi_fu_87_p4);
assign img_2_data_stream_0_V_din = img_12_data_stream_0_V_dout;
assign indvar_flatten_next_fu_112_p2 = (indvar_flatten_reg_72 + ap_const_lv19_1);
assign or_cond_i_fu_164_p2 = (tmp_5_reg_182 & tmp_9_reg_187);
assign tmp_5_fu_146_p2 = (i_0_i_mid2_fu_138_p3 < ap_const_lv10_1E0? 1'b1: 1'b0);
assign tmp_9_fu_152_p2 = (asd_0_i_mid2_fu_124_p3 < ap_const_lv10_280? 1'b1: 1'b0);


endmodule //image_filter_fh_Loop_1_proc

