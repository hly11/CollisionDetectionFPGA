-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter_fh_PadImage_480_640_51_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_data_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_stream_V_empty_n : IN STD_LOGIC;
    in_data_stream_V_read : OUT STD_LOGIC;
    out_data_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_data_stream_V_full_n : IN STD_LOGIC;
    out_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of image_filter_fh_PadImage_480_640_51_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st6_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_59949 : STD_LOGIC_VECTOR (18 downto 0) := "1011001100101001001";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_2B3 : STD_LOGIC_VECTOR (9 downto 0) := "1010110011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_1E0 : STD_LOGIC_VECTOR (9 downto 0) := "0111100000";
    constant ap_const_lv10_1DF : STD_LOGIC_VECTOR (9 downto 0) := "0111011111";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_true : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal linebuffer_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal linebuffer_ce0 : STD_LOGIC;
    signal linebuffer_we0 : STD_LOGIC;
    signal linebuffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_104 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_reg_115 : STD_LOGIC_VECTOR (9 downto 0);
    signal asd_reg_126 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_flatten_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_238 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_62 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal tmp_reg_258 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_266 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_78 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_238_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_88 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_238_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_158_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal asd_mid2_fu_170_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal asd_mid2_reg_247 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_mid2_fu_184_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_mid2_reg_253 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_258_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_262 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_2_reg_266_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal asd_1_fu_210_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_144 : BOOLEAN;
    signal i_phi_fu_119_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_phiprechg_tmp_5_reg_137pp0_it2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_tmp_5_reg_137pp0_it3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_tmp_5_reg_137pp0_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_1_fu_66 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_178_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_248 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_140 : BOOLEAN;
    signal ap_sig_bdd_170 : BOOLEAN;
    signal ap_sig_bdd_164 : BOOLEAN;
    signal ap_sig_bdd_284 : BOOLEAN;
    signal ap_sig_bdd_283 : BOOLEAN;

    component image_filter_fh_PadImage_480_640_51_s_linebuffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    linebuffer_U : component image_filter_fh_PadImage_480_640_51_s_linebuffer
    generic map (
        DataWidth => 32,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuffer_address0,
        ce0 => linebuffer_ce0,
        we0 => linebuffer_we0,
        d0 => linebuffer_d0,
        q0 => linebuffer_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((exitcond_flatten_fu_152_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_144))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_144))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then
                    if (not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
                        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then 
                        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_144))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_phiprechg_tmp_5_reg_137pp0_it2 assign process. --
    ap_reg_phiprechg_tmp_5_reg_137pp0_it2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_238 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_reg_258)) and (ap_const_lv1_0 = tmp_2_reg_266) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_238 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_258) and (ap_const_lv1_0 = tmp_2_reg_266) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))))) then 
                ap_reg_phiprechg_tmp_5_reg_137pp0_it2 <= output_1_fu_66;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
                ap_reg_phiprechg_tmp_5_reg_137pp0_it2 <= ap_reg_phiprechg_tmp_5_reg_137pp0_it1;
            end if; 
        end if;
    end process;

    -- ap_reg_phiprechg_tmp_5_reg_137pp0_it3 assign process. --
    ap_reg_phiprechg_tmp_5_reg_137pp0_it3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_164) then
                if (ap_sig_bdd_170) then 
                    ap_reg_phiprechg_tmp_5_reg_137pp0_it3 <= tmp_6_reg_286;
                elsif (ap_sig_bdd_140) then 
                    ap_reg_phiprechg_tmp_5_reg_137pp0_it3 <= linebuffer_q0;
                elsif ((ap_true = ap_true)) then 
                    ap_reg_phiprechg_tmp_5_reg_137pp0_it3 <= ap_reg_phiprechg_tmp_5_reg_137pp0_it2;
                end if;
            end if; 
        end if;
    end process;

    -- asd_reg_126 assign process. --
    asd_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_flatten_fu_152_p2 = ap_const_lv1_0))) then 
                asd_reg_126 <= asd_1_fu_210_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_144))) then 
                asd_reg_126 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- i_reg_115 assign process. --
    i_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_238 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
                i_reg_115 <= i_mid2_reg_253;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_144))) then 
                i_reg_115 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_104 assign process. --
    indvar_flatten_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_flatten_fu_152_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_104 <= indvar_flatten_next_fu_158_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_144))) then 
                indvar_flatten_reg_104 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                ap_reg_ppstg_exitcond_flatten_reg_238_pp0_it1 <= exitcond_flatten_reg_238;
                ap_reg_ppstg_tmp_2_reg_266_pp0_it1 <= tmp_2_reg_266;
                ap_reg_ppstg_tmp_reg_258_pp0_it1 <= tmp_reg_258;
                exitcond_flatten_reg_238 <= exitcond_flatten_fu_152_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then
                ap_reg_ppstg_exitcond_flatten_reg_238_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_238_pp0_it1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_flatten_fu_152_p2 = ap_const_lv1_0))) then
                asd_mid2_reg_247 <= asd_mid2_fu_170_p3;
                tmp_2_reg_266 <= tmp_2_fu_204_p2;
                tmp_reg_258 <= tmp_fu_192_p2;
                tmp_s_reg_262 <= tmp_s_fu_198_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and (exitcond_flatten_fu_152_p2 = ap_const_lv1_0))) then
                i_mid2_reg_253 <= i_mid2_fu_184_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_238 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_reg_258)) and not((ap_const_lv1_0 = tmp_2_reg_266)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                output_1_fu_66 <= in_data_stream_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_238 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_reg_258)) and not((ap_const_lv1_0 = tmp_2_reg_266)) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                tmp_6_reg_286 <= in_data_stream_V_dout;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_bdd_78, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_88, ap_reg_ppiten_pp0_it3, ap_sig_bdd_144)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_144)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not(((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st6_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st6_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st6_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_tmp_5_reg_137pp0_it1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    -- ap_sig_bdd_140 assign process. --
    ap_sig_bdd_140_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_238_pp0_it1, ap_reg_ppstg_tmp_reg_258_pp0_it1, ap_reg_ppstg_tmp_2_reg_266_pp0_it1)
    begin
                ap_sig_bdd_140 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_238_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_258_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_2_reg_266_pp0_it1)));
    end process;


    -- ap_sig_bdd_144 assign process. --
    ap_sig_bdd_144_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_144 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_164 assign process. --
    ap_sig_bdd_164_assign_proc : process(ap_sig_bdd_78, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_88, ap_reg_ppiten_pp0_it3)
    begin
                ap_sig_bdd_164 <= ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))));
    end process;


    -- ap_sig_bdd_170 assign process. --
    ap_sig_bdd_170_assign_proc : process(ap_reg_ppstg_exitcond_flatten_reg_238_pp0_it1, ap_reg_ppstg_tmp_reg_258_pp0_it1, ap_reg_ppstg_tmp_2_reg_266_pp0_it1)
    begin
                ap_sig_bdd_170 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_238_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_2_reg_266_pp0_it1)) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_258_pp0_it1)));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_248 assign process. --
    ap_sig_bdd_248_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_248 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_283 assign process. --
    ap_sig_bdd_283_assign_proc : process(exitcond_flatten_reg_238, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_2_reg_266, ap_reg_ppiten_pp0_it1)
    begin
                ap_sig_bdd_283 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_238 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_2_reg_266)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1));
    end process;


    -- ap_sig_bdd_284 assign process. --
    ap_sig_bdd_284_assign_proc : process(tmp_reg_258, tmp_s_reg_262)
    begin
                ap_sig_bdd_284 <= (not((ap_const_lv1_0 = tmp_reg_258)) and not((ap_const_lv1_0 = tmp_s_reg_262)));
    end process;


    -- ap_sig_bdd_62 assign process. --
    ap_sig_bdd_62_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_62 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_78 assign process. --
    ap_sig_bdd_78_assign_proc : process(in_data_stream_V_empty_n, exitcond_flatten_reg_238, tmp_reg_258, tmp_2_reg_266)
    begin
                ap_sig_bdd_78 <= ((in_data_stream_V_empty_n = ap_const_logic_0) and (exitcond_flatten_reg_238 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_reg_258)) and not((ap_const_lv1_0 = tmp_2_reg_266)));
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(out_data_stream_V_full_n, ap_reg_ppstg_exitcond_flatten_reg_238_pp0_it2)
    begin
                ap_sig_bdd_88 <= ((out_data_stream_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_238_pp0_it2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_62)
    begin
        if (ap_sig_bdd_62) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_2 assign process. --
    ap_sig_cseq_ST_st6_fsm_2_assign_proc : process(ap_sig_bdd_248)
    begin
        if (ap_sig_bdd_248) then 
            ap_sig_cseq_ST_st6_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    asd_1_fu_210_p2 <= std_logic_vector(unsigned(asd_mid2_fu_170_p3) + unsigned(ap_const_lv10_1));
    asd_mid2_fu_170_p3 <= 
        ap_const_lv10_0 when (exitcond_fu_164_p2(0) = '1') else 
        asd_reg_126;
    exitcond_flatten_fu_152_p2 <= "1" when (indvar_flatten_reg_104 = ap_const_lv19_59949) else "0";
    exitcond_fu_164_p2 <= "1" when (asd_reg_126 = ap_const_lv10_2B3) else "0";
    i_mid2_fu_184_p3 <= 
        i_s_fu_178_p2 when (exitcond_fu_164_p2(0) = '1') else 
        i_phi_fu_119_p4;

    -- i_phi_fu_119_p4 assign process. --
    i_phi_fu_119_p4_assign_proc : process(i_reg_115, exitcond_flatten_reg_238, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_mid2_reg_253)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_238 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            i_phi_fu_119_p4 <= i_mid2_reg_253;
        else 
            i_phi_fu_119_p4 <= i_reg_115;
        end if; 
    end process;

    i_s_fu_178_p2 <= std_logic_vector(unsigned(i_phi_fu_119_p4) + unsigned(ap_const_lv10_1));

    -- in_data_stream_V_read assign process. --
    in_data_stream_V_read_assign_proc : process(exitcond_flatten_reg_238, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_reg_258, tmp_2_reg_266, ap_sig_bdd_78, ap_reg_ppiten_pp0_it1, ap_sig_bdd_88, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_238 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_reg_258)) and not((ap_const_lv1_0 = tmp_2_reg_266)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            in_data_stream_V_read <= ap_const_logic_1;
        else 
            in_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_158_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_104) + unsigned(ap_const_lv19_1));

    -- linebuffer_address0 assign process. --
    linebuffer_address0_assign_proc : process(tmp_reg_258, tmp_7_fu_219_p1, tmp_8_fu_223_p1, ap_sig_bdd_284, ap_sig_bdd_283)
    begin
        if (ap_sig_bdd_283) then
            if (ap_sig_bdd_284) then 
                linebuffer_address0 <= tmp_8_fu_223_p1(10 - 1 downto 0);
            elsif ((ap_const_lv1_0 = tmp_reg_258)) then 
                linebuffer_address0 <= tmp_7_fu_219_p1(10 - 1 downto 0);
            else 
                linebuffer_address0 <= "XXXXXXXXXX";
            end if;
        else 
            linebuffer_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- linebuffer_ce0 assign process. --
    linebuffer_ce0_assign_proc : process(exitcond_flatten_reg_238, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_reg_258, tmp_2_reg_266, ap_sig_bdd_78, ap_reg_ppiten_pp0_it1, ap_sig_bdd_88, ap_reg_ppiten_pp0_it3, tmp_s_reg_262)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_238 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_reg_258) and not((ap_const_lv1_0 = tmp_2_reg_266)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_238 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_reg_258)) and not((ap_const_lv1_0 = tmp_2_reg_266)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_lv1_0 = tmp_s_reg_262))))) then 
            linebuffer_ce0 <= ap_const_logic_1;
        else 
            linebuffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    linebuffer_d0 <= in_data_stream_V_dout;

    -- linebuffer_we0 assign process. --
    linebuffer_we0_assign_proc : process(exitcond_flatten_reg_238, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_reg_258, tmp_2_reg_266, ap_sig_bdd_78, ap_reg_ppiten_pp0_it1, ap_sig_bdd_88, ap_reg_ppiten_pp0_it3, tmp_s_reg_262)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_238 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_reg_258)) and not((ap_const_lv1_0 = tmp_2_reg_266)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not((ap_const_lv1_0 = tmp_s_reg_262))))) then 
            linebuffer_we0 <= ap_const_logic_1;
        else 
            linebuffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_data_stream_V_din <= ap_reg_phiprechg_tmp_5_reg_137pp0_it3;

    -- out_data_stream_V_write assign process. --
    out_data_stream_V_write_assign_proc : process(ap_sig_bdd_78, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten_reg_238_pp0_it2, ap_sig_bdd_88, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_238_pp0_it2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_78 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_88 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then 
            out_data_stream_V_write <= ap_const_logic_1;
        else 
            out_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_204_p2 <= "1" when (unsigned(asd_mid2_fu_170_p3) < unsigned(ap_const_lv10_280)) else "0";
    tmp_7_fu_219_p1 <= std_logic_vector(resize(unsigned(asd_mid2_reg_247),64));
    tmp_8_fu_223_p1 <= std_logic_vector(resize(unsigned(asd_mid2_reg_247),64));
    tmp_fu_192_p2 <= "1" when (unsigned(i_mid2_fu_184_p3) < unsigned(ap_const_lv10_1E0)) else "0";
    tmp_s_fu_198_p2 <= "1" when (i_mid2_fu_184_p3 = ap_const_lv10_1DF) else "0";
end behav;
