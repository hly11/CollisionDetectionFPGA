// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module image_filter_sqrtf1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 28'b1;
parameter    ap_ST_st2_fsm_1 = 28'b10;
parameter    ap_ST_st3_fsm_2 = 28'b100;
parameter    ap_ST_st4_fsm_3 = 28'b1000;
parameter    ap_ST_st5_fsm_4 = 28'b10000;
parameter    ap_ST_st6_fsm_5 = 28'b100000;
parameter    ap_ST_st7_fsm_6 = 28'b1000000;
parameter    ap_ST_st8_fsm_7 = 28'b10000000;
parameter    ap_ST_st9_fsm_8 = 28'b100000000;
parameter    ap_ST_st10_fsm_9 = 28'b1000000000;
parameter    ap_ST_st11_fsm_10 = 28'b10000000000;
parameter    ap_ST_st12_fsm_11 = 28'b100000000000;
parameter    ap_ST_st13_fsm_12 = 28'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 28'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 28'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 28'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 28'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 28'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 28'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 28'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 28'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 28'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 28'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 28'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 28'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 28'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 28'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 28'b1000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm = 28'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_47;
reg    ap_sig_bdd_61;
wire   [31:0] grp_fu_13_p1;
wire   [31:0] grp_fu_13_p2;
wire   [31:0] grp_fu_13_p0;
reg    grp_fu_13_ce;
reg    ap_sig_cseq_ST_st28_fsm_27;
reg    ap_sig_bdd_258;
reg   [31:0] ap_return_preg = 32'b00000000000000000000000000000000;
reg   [27:0] ap_NS_fsm;


image_filter_fsqrt_32ns_32ns_32_28 #(
    .ID( 1 ),
    .NUM_STAGE( 28 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
image_filter_fsqrt_32ns_32ns_32_28_U60(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_13_p0 ),
    .din1( grp_fu_13_p1 ),
    .ce( grp_fu_13_ce ),
    .dout( grp_fu_13_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st28_fsm_27)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_return_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv32_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st28_fsm_27)) begin
            ap_return_preg <= grp_fu_13_p2;
        end
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st28_fsm_27)
begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st28_fsm_27))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st28_fsm_27)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st28_fsm_27)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return assign process. ///
always @ (grp_fu_13_p2 or ap_sig_cseq_ST_st28_fsm_27 or ap_return_preg)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st28_fsm_27)) begin
        ap_return = grp_fu_13_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_47)
begin
    if (ap_sig_bdd_47) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st28_fsm_27 assign process. ///
always @ (ap_sig_bdd_258)
begin
    if (ap_sig_bdd_258) begin
        ap_sig_cseq_ST_st28_fsm_27 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st28_fsm_27 = ap_const_logic_0;
    end
end

/// grp_fu_13_ce assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_61)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ap_sig_bdd_61)) begin
        grp_fu_13_ce = ap_const_logic_0;
    end else begin
        grp_fu_13_ce = ap_const_logic_1;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_61)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_61) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : 
        begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : 
        begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_258 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_258 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1B]);
end

/// ap_sig_bdd_47 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_47 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_61 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_61 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign grp_fu_13_p0 = ap_const_lv32_0;
assign grp_fu_13_p1 = p_read;


endmodule //image_filter_sqrtf1

